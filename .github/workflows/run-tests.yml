# Copyright 2022 Democratized Data Foundation
#
# Use of this software is governed by the Business Source License
# included in the file licenses/BSL.txt.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0, included in the file
# licenses/APL.txt.

name: Run Tests Workflow

on:
  pull_request:
    branches:
      - master
      - develop

  push:

jobs:
  run-tests:
    name: Run tests job matrix

    runs-on: ubuntu-latest

    strategy:
      matrix:
        client-type: [go, http]
        database-type: [badger-file, badger-memory]
        mutation-type: [gql, collection-named, collection-save]

    env:
      DEFRA_CLIENT_GO: ${{ matrix.client-type == 'go' }}
      DEFRA_CLIENT_HTTP: ${{ matrix.client-type == 'http' }}
      DEFRA_BADGER_MEMORY: ${{ matrix.database-type == 'badger-memory' }}
      DEFRA_BADGER_FILE: ${{ matrix.database-type == 'badger-file' }}
      DEFRA_MUTATION_TYPE: ${{ matrix.mutation-type }}

    steps:
      - name: Checkout code into the directory
        uses: actions/checkout@v3

      - name: Setup Go environment explicitly
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"
          check-latest: true

      - name: Install Go dependencies
        run: |
          go mod download
          go install gotest.tools/gotestsum@latest
          go install github.com/ory/go-acc@latest

      - name: Build Lens dependencies
        run: |
          rustup target add wasm32-unknown-unknown
          cargo build --target wasm32-unknown-unknown --manifest-path "./tests/lenses/rust_wasm32_set_default/Cargo.toml"
	        cargo build --target wasm32-unknown-unknown --manifest-path "./tests/lenses/rust_wasm32_remove/Cargo.toml"
	        cargo build --target wasm32-unknown-unknown --manifest-path "./tests/lenses/rust_wasm32_copy/Cargo.toml"

      - name: Run the tests
        run: gotestsum ./... --format testname -- -race -shuffle=on -timeout 300s

      - name: Generate test coverage
        run: go-acc ./... --output=coverage.txt --covermode=atomic -- -failfast

      - name: Upload coverage to Codecov without token, retry on failure
        env: 
          codecov_secret: ${{ secrets.CODECOV_TOKEN }}
        if: env.codecov_secret == ''
        uses: Wandalen/wretry.action@v1.0.36
        with:
          attempt_limit: 5
          attempt_delay: 10000
          action: codecov/codecov-action@v3
          with: |
            name: defradb-codecov
            files: ./coverage.txt
            os: 'linux'
            fail_ci_if_error: true
            verbose: true

      - name: Upload coverage to Codecov with token
        env: 
          codecov_secret: ${{ secrets.CODECOV_TOKEN }}
        if: env.codecov_secret != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.codecov_secret }}
          name: defradb-codecov
          files: ./coverage.txt
          os: 'linux'
          fail_ci_if_error: true
          verbose: true
