// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetReplicatorRequest struct {
	Collections []string `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	Addr        []byte   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *SetReplicatorRequest) Reset()         { *m = SetReplicatorRequest{} }
func (m *SetReplicatorRequest) String() string { return proto.CompactTextString(m) }
func (*SetReplicatorRequest) ProtoMessage()    {}
func (*SetReplicatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *SetReplicatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReplicatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReplicatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReplicatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReplicatorRequest.Merge(m, src)
}
func (m *SetReplicatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetReplicatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReplicatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetReplicatorRequest proto.InternalMessageInfo

func (m *SetReplicatorRequest) GetCollections() []string {
	if m != nil {
		return m.Collections
	}
	return nil
}

func (m *SetReplicatorRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

type SetReplicatorReply struct {
	PeerID []byte `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *SetReplicatorReply) Reset()         { *m = SetReplicatorReply{} }
func (m *SetReplicatorReply) String() string { return proto.CompactTextString(m) }
func (*SetReplicatorReply) ProtoMessage()    {}
func (*SetReplicatorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *SetReplicatorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetReplicatorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetReplicatorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetReplicatorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReplicatorReply.Merge(m, src)
}
func (m *SetReplicatorReply) XXX_Size() int {
	return m.Size()
}
func (m *SetReplicatorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReplicatorReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetReplicatorReply proto.InternalMessageInfo

func (m *SetReplicatorReply) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type DeleteReplicatorRequest struct {
	PeerID []byte `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *DeleteReplicatorRequest) Reset()         { *m = DeleteReplicatorRequest{} }
func (m *DeleteReplicatorRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteReplicatorRequest) ProtoMessage()    {}
func (*DeleteReplicatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *DeleteReplicatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReplicatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReplicatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReplicatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReplicatorRequest.Merge(m, src)
}
func (m *DeleteReplicatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReplicatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReplicatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReplicatorRequest proto.InternalMessageInfo

func (m *DeleteReplicatorRequest) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type DeleteReplicatorReply struct {
	PeerID []byte `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
}

func (m *DeleteReplicatorReply) Reset()         { *m = DeleteReplicatorReply{} }
func (m *DeleteReplicatorReply) String() string { return proto.CompactTextString(m) }
func (*DeleteReplicatorReply) ProtoMessage()    {}
func (*DeleteReplicatorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *DeleteReplicatorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReplicatorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReplicatorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReplicatorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReplicatorReply.Merge(m, src)
}
func (m *DeleteReplicatorReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReplicatorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReplicatorReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReplicatorReply proto.InternalMessageInfo

func (m *DeleteReplicatorReply) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type GetAllReplicatorRequest struct {
}

func (m *GetAllReplicatorRequest) Reset()         { *m = GetAllReplicatorRequest{} }
func (m *GetAllReplicatorRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllReplicatorRequest) ProtoMessage()    {}
func (*GetAllReplicatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetAllReplicatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReplicatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReplicatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReplicatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReplicatorRequest.Merge(m, src)
}
func (m *GetAllReplicatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReplicatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReplicatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReplicatorRequest proto.InternalMessageInfo

type GetAllReplicatorReply struct {
	Replicators []*GetAllReplicatorReply_Replicators `protobuf:"bytes,1,rep,name=replicators,proto3" json:"replicators,omitempty"`
}

func (m *GetAllReplicatorReply) Reset()         { *m = GetAllReplicatorReply{} }
func (m *GetAllReplicatorReply) String() string { return proto.CompactTextString(m) }
func (*GetAllReplicatorReply) ProtoMessage()    {}
func (*GetAllReplicatorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetAllReplicatorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReplicatorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReplicatorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReplicatorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReplicatorReply.Merge(m, src)
}
func (m *GetAllReplicatorReply) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReplicatorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReplicatorReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReplicatorReply proto.InternalMessageInfo

func (m *GetAllReplicatorReply) GetReplicators() []*GetAllReplicatorReply_Replicators {
	if m != nil {
		return m.Replicators
	}
	return nil
}

type GetAllReplicatorReply_Replicators struct {
	Info    *GetAllReplicatorReply_Replicators_Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Schemas []string                                `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (m *GetAllReplicatorReply_Replicators) Reset()         { *m = GetAllReplicatorReply_Replicators{} }
func (m *GetAllReplicatorReply_Replicators) String() string { return proto.CompactTextString(m) }
func (*GetAllReplicatorReply_Replicators) ProtoMessage()    {}
func (*GetAllReplicatorReply_Replicators) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5, 0}
}
func (m *GetAllReplicatorReply_Replicators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReplicatorReply_Replicators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReplicatorReply_Replicators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReplicatorReply_Replicators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReplicatorReply_Replicators.Merge(m, src)
}
func (m *GetAllReplicatorReply_Replicators) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReplicatorReply_Replicators) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReplicatorReply_Replicators.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReplicatorReply_Replicators proto.InternalMessageInfo

func (m *GetAllReplicatorReply_Replicators) GetInfo() *GetAllReplicatorReply_Replicators_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *GetAllReplicatorReply_Replicators) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

type GetAllReplicatorReply_Replicators_Info struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addrs []byte `protobuf:"bytes,2,opt,name=addrs,proto3" json:"addrs,omitempty"`
}

func (m *GetAllReplicatorReply_Replicators_Info) Reset() {
	*m = GetAllReplicatorReply_Replicators_Info{}
}
func (m *GetAllReplicatorReply_Replicators_Info) String() string { return proto.CompactTextString(m) }
func (*GetAllReplicatorReply_Replicators_Info) ProtoMessage()    {}
func (*GetAllReplicatorReply_Replicators_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5, 0, 0}
}
func (m *GetAllReplicatorReply_Replicators_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReplicatorReply_Replicators_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReplicatorReply_Replicators_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReplicatorReply_Replicators_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReplicatorReply_Replicators_Info.Merge(m, src)
}
func (m *GetAllReplicatorReply_Replicators_Info) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReplicatorReply_Replicators_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReplicatorReply_Replicators_Info.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReplicatorReply_Replicators_Info proto.InternalMessageInfo

func (m *GetAllReplicatorReply_Replicators_Info) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetAllReplicatorReply_Replicators_Info) GetAddrs() []byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func init() {
	proto.RegisterType((*SetReplicatorRequest)(nil), "api.pb.SetReplicatorRequest")
	proto.RegisterType((*SetReplicatorReply)(nil), "api.pb.SetReplicatorReply")
	proto.RegisterType((*DeleteReplicatorRequest)(nil), "api.pb.DeleteReplicatorRequest")
	proto.RegisterType((*DeleteReplicatorReply)(nil), "api.pb.DeleteReplicatorReply")
	proto.RegisterType((*GetAllReplicatorRequest)(nil), "api.pb.GetAllReplicatorRequest")
	proto.RegisterType((*GetAllReplicatorReply)(nil), "api.pb.GetAllReplicatorReply")
	proto.RegisterType((*GetAllReplicatorReply_Replicators)(nil), "api.pb.GetAllReplicatorReply.Replicators")
	proto.RegisterType((*GetAllReplicatorReply_Replicators_Info)(nil), "api.pb.GetAllReplicatorReply.Replicators.Info")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x6d, 0xfb, 0x78, 0x10, 0x6e, 0xdf, 0x33, 0x7a, 0x03, 0x52, 0x1b, 0xad, 0xa4, 0x2b, 0x4c,
	0x48, 0x8d, 0xf8, 0x05, 0x12, 0x12, 0x43, 0x70, 0x55, 0xf4, 0x03, 0x4a, 0x7b, 0x89, 0x4d, 0x46,
	0x5a, 0x3b, 0xa3, 0x09, 0x3b, 0x13, 0x7f, 0xc0, 0xad, 0x7f, 0xe4, 0x92, 0xa5, 0x4b, 0x03, 0x3f,
	0x62, 0x98, 0x82, 0x20, 0xa5, 0xc6, 0xdd, 0x9c, 0xb9, 0xf7, 0x9c, 0x7b, 0x7b, 0x4e, 0x07, 0xca,
	0x5e, 0x1c, 0x3a, 0x71, 0x12, 0x89, 0x08, 0x8b, 0xf2, 0x38, 0xb0, 0xaf, 0xa0, 0xd2, 0x27, 0xe1,
	0x52, 0xcc, 0x42, 0xdf, 0x13, 0x51, 0xe2, 0xd2, 0xfd, 0x03, 0x71, 0x81, 0x75, 0xd0, 0xfd, 0x88,
	0x31, 0xf2, 0x45, 0x18, 0x8d, 0xb8, 0xa1, 0xd6, 0xff, 0x34, 0xca, 0xee, 0xfa, 0x15, 0x22, 0x14,
	0xbc, 0x20, 0x48, 0x0c, 0xad, 0xae, 0x36, 0xfe, 0xb9, 0xf2, 0x6c, 0x37, 0x01, 0x37, 0xd4, 0x62,
	0x36, 0xc6, 0x7d, 0x28, 0xc6, 0x44, 0x49, 0xb7, 0x63, 0xa8, 0xb2, 0x77, 0x81, 0xec, 0x33, 0xa8,
	0x75, 0x88, 0x91, 0xa0, 0xec, 0xf8, 0x3c, 0xca, 0x29, 0x54, 0xb3, 0x94, 0x9f, 0x66, 0x1c, 0x40,
	0xed, 0x92, 0xc4, 0x05, 0x63, 0x99, 0x19, 0xf6, 0x93, 0x06, 0xd5, 0x6c, 0x6d, 0x2e, 0xd6, 0x03,
	0x3d, 0xf9, 0xba, 0x4a, 0x3f, 0x5e, 0x6f, 0x9d, 0x38, 0xa9, 0x65, 0xce, 0x56, 0x8e, 0xb3, 0xc2,
	0xdc, 0x5d, 0x67, 0x9b, 0xaf, 0x2a, 0xe8, 0x6b, 0x45, 0x6c, 0x43, 0x21, 0x1c, 0x0d, 0x23, 0xb9,
	0xa7, 0xde, 0x72, 0x7e, 0xad, 0xea, 0x74, 0x47, 0xc3, 0xc8, 0x95, 0x5c, 0x34, 0xa0, 0xc4, 0xfd,
	0x5b, 0xba, 0xf3, 0xb8, 0xa1, 0xc9, 0x64, 0x96, 0xd0, 0x6c, 0x42, 0x61, 0xde, 0x87, 0x3b, 0xa0,
	0x85, 0xc1, 0xc2, 0x0b, 0x2d, 0x0c, 0xb0, 0x02, 0x7f, 0xe7, 0x09, 0xf1, 0x45, 0x5c, 0x29, 0x68,
	0x3d, 0x6b, 0x50, 0xea, 0x53, 0xf2, 0x18, 0xfa, 0x84, 0x3d, 0xf8, 0xff, 0x2d, 0x3b, 0x3c, 0x5c,
	0xae, 0xb6, 0xed, 0x07, 0x31, 0xcd, 0x9c, 0x6a, 0xcc, 0xc6, 0xb6, 0x82, 0xd7, 0xb0, 0xbb, 0x99,
	0x13, 0x1e, 0x2f, 0x19, 0x39, 0xa1, 0x9b, 0x47, 0xf9, 0x0d, 0xa9, 0xea, 0x0d, 0xec, 0x6d, 0xda,
	0xc4, 0x57, 0xb2, 0x39, 0x39, 0xaf, 0x64, 0xb7, 0x5a, 0x6c, 0x2b, 0x6d, 0xe3, 0x6d, 0x6a, 0xa9,
	0x93, 0xa9, 0xa5, 0x7e, 0x4c, 0x2d, 0xf5, 0x65, 0x66, 0x29, 0x93, 0x99, 0xa5, 0xbc, 0xcf, 0x2c,
	0x65, 0x50, 0x94, 0x8f, 0xe5, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0x42, 0xcf, 0xcd, 0x25, 0x39,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// SetReplicator for this peer
	SetReplicator(ctx context.Context, in *SetReplicatorRequest, opts ...grpc.CallOption) (*SetReplicatorReply, error)
	// DeleteReplicator for this peer
	DeleteReplicator(ctx context.Context, in *DeleteReplicatorRequest, opts ...grpc.CallOption) (*DeleteReplicatorReply, error)
	// DeleteReplicator for this peer
	GetAllReplicators(ctx context.Context, in *GetAllReplicatorRequest, opts ...grpc.CallOption) (*GetAllReplicatorReply, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) SetReplicator(ctx context.Context, in *SetReplicatorRequest, opts ...grpc.CallOption) (*SetReplicatorReply, error) {
	out := new(SetReplicatorReply)
	err := c.cc.Invoke(ctx, "/api.pb.Service/SetReplicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteReplicator(ctx context.Context, in *DeleteReplicatorRequest, opts ...grpc.CallOption) (*DeleteReplicatorReply, error) {
	out := new(DeleteReplicatorReply)
	err := c.cc.Invoke(ctx, "/api.pb.Service/DeleteReplicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetAllReplicators(ctx context.Context, in *GetAllReplicatorRequest, opts ...grpc.CallOption) (*GetAllReplicatorReply, error) {
	out := new(GetAllReplicatorReply)
	err := c.cc.Invoke(ctx, "/api.pb.Service/GetAllReplicators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// SetReplicator for this peer
	SetReplicator(context.Context, *SetReplicatorRequest) (*SetReplicatorReply, error)
	// DeleteReplicator for this peer
	DeleteReplicator(context.Context, *DeleteReplicatorRequest) (*DeleteReplicatorReply, error)
	// DeleteReplicator for this peer
	GetAllReplicators(context.Context, *GetAllReplicatorRequest) (*GetAllReplicatorReply, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) SetReplicator(ctx context.Context, req *SetReplicatorRequest) (*SetReplicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReplicator not implemented")
}
func (*UnimplementedServiceServer) DeleteReplicator(ctx context.Context, req *DeleteReplicatorRequest) (*DeleteReplicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplicator not implemented")
}
func (*UnimplementedServiceServer) GetAllReplicators(ctx context.Context, req *GetAllReplicatorRequest) (*GetAllReplicatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReplicators not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_SetReplicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReplicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetReplicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.Service/SetReplicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetReplicator(ctx, req.(*SetReplicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteReplicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteReplicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.Service/DeleteReplicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteReplicator(ctx, req.(*DeleteReplicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetAllReplicators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReplicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetAllReplicators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.Service/GetAllReplicators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetAllReplicators(ctx, req.(*GetAllReplicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetReplicator",
			Handler:    _Service_SetReplicator_Handler,
		},
		{
			MethodName: "DeleteReplicator",
			Handler:    _Service_DeleteReplicator_Handler,
		},
		{
			MethodName: "GetAllReplicators",
			Handler:    _Service_GetAllReplicators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *SetReplicatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReplicatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetReplicatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Collections) > 0 {
		for iNdEx := len(m.Collections) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Collections[iNdEx])
			copy(dAtA[i:], m.Collections[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Collections[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetReplicatorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReplicatorReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetReplicatorReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteReplicatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReplicatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReplicatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteReplicatorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReplicatorReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReplicatorReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerID) > 0 {
		i -= len(m.PeerID)
		copy(dAtA[i:], m.PeerID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllReplicatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReplicatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReplicatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllReplicatorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReplicatorReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReplicatorReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Replicators) > 0 {
		for iNdEx := len(m.Replicators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replicators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllReplicatorReply_Replicators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReplicatorReply_Replicators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReplicatorReply_Replicators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllReplicatorReply_Replicators_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReplicatorReply_Replicators_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReplicatorReply_Replicators_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		i -= len(m.Addrs)
		copy(dAtA[i:], m.Addrs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Addrs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetReplicatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collections) > 0 {
		for _, s := range m.Collections {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SetReplicatorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *DeleteReplicatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *DeleteReplicatorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetAllReplicatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllReplicatorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Replicators) > 0 {
		for _, e := range m.Replicators {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GetAllReplicatorReply_Replicators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GetAllReplicatorReply_Replicators_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Addrs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetReplicatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReplicatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReplicatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collections", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collections = append(m.Collections, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReplicatorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReplicatorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReplicatorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = append(m.PeerID[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerID == nil {
				m.PeerID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReplicatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReplicatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReplicatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = append(m.PeerID[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerID == nil {
				m.PeerID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReplicatorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReplicatorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReplicatorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerID = append(m.PeerID[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerID == nil {
				m.PeerID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReplicatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReplicatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReplicatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReplicatorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReplicatorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReplicatorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicators = append(m.Replicators, &GetAllReplicatorReply_Replicators{})
			if err := m.Replicators[len(m.Replicators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReplicatorReply_Replicators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replicators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replicators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &GetAllReplicatorReply_Replicators_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReplicatorReply_Replicators_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs[:0], dAtA[iNdEx:postIndex]...)
			if m.Addrs == nil {
				m.Addrs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
