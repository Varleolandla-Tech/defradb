// Copyright 2020 Source Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.
// Package planner creates DefraDB GraphQL Query Plans.
//
// DefraDB Query Planner
// =====================
//
// The DefraDB Query Planner creates an Execution Plan from the currently defined schemas,
// collections, query, and any possible indexes.
//
// An execution plan is a heirarchical structure that represents how and what data to
// query the database for. It defines what should be done at each execution step, and if it
// should be done in parallel or sequentially.
//
// The plan is structured as a graph of nodes using the Volcano iterator Method Query 
//Evaluation pproach.
// Volcano - An Extensible and Parallel Query Evaluation System
// [Paper](https://paperhub.s3.amazonaws.com/dace52a42c07f7f8348b08dc2b186061.pdf).
//
// This method enables extensibility, optimization, and potential parallelism.
//
// Each node in the plan graph implements the planNode interface. Each node is responsible
// for generating exactly one result document. The last leaf in the graph is often a
// data source, that generates the incoming data. All the nodes above the source leaf
// node continuously processes the document, until it reaches the top root node. Some
// nodes may loop continously until they can produce a result document. Eg. JoinNodes
// will collection batches of results from their source node, and compute joins with one
// or more other source nodes, it will loop until it finds a result document that
// satisfies the join predicate.
//
// The plan is executed as defined above, result by result, by iteratively calling the
// Next() method. Which will either return True or False, depending on if it succesfully
// produced a record, which can be accessed via the Values() method.
//
// The plan starts with a base ast.Document, which represents the entire provided
// request query string, parsed into an appropraite AST Document. The AST Document
// is generated by the github.com/graphql-go/graphql package. It is then further
// parsed using a native DefraDB GraphQL Parser
// (github.com/sourcenetwork/defradb/query/graphql/parser), which converts the complex
// AST Document, into a manageable structure, with all the relevant query information
// readily available.
//
// More details about the DefraDB Query Planner can be found in the DefraDB Technical
// Specification Document.
package planner
