// Copyright 2023 Democratized Data Foundation
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package gen

import (
	"math/rand"

	"github.com/sourcenetwork/defradb/client"
	"github.com/sourcenetwork/defradb/client/request"
)

const (
	defaultNumDocs           = 10
	defaultNumChildrenPerDoc = 2

	defaultStrLen = 10
	defaultIntMin = 0
	defaultIntMax = 10000
)

type docRec struct {
	doc    map[string]any
	docKey string
}

// AutoGenerateDocs generates random documents for a schema.
func AutoGenerateDocs(schema string, options ...Option) ([]GeneratedDoc, error) {
	parser := schemaParser{}
	typeDefs, genConfigs, err := parser.Parse(schema)
	if err != nil {
		return nil, err
	}
	generator := randomDocGenerator{types: typeDefs, config: genConfigs}
	return generator.GenerateDocs(options...)
}

type randomDocGenerator struct {
	types        map[string]typeDefinition
	config       configsMap
	resultDocs   []GeneratedDoc
	usageCounter typeUsageCounters
	cols         map[string][]docRec
	docsDemand   map[string]typeDemand
	random       rand.Rand
}

func (g *randomDocGenerator) GenerateDocs(options ...Option) ([]GeneratedDoc, error) {
	g.cols = make(map[string][]docRec)

	configurator := newDocGenConfigurator(g.types, g.config)
	err := configurator.Configure(options...)
	if err != nil {
		return nil, err
	}

	g.random = *configurator.random

	g.docsDemand = configurator.docsDemand
	g.usageCounter = configurator.usageCounter

	g.resultDocs = make([]GeneratedDoc, 0, g.getMaxTotalDemand())
	docsLists, err := g.generateRandomDocs(configurator.typesOrder)
	if err != nil {
		return nil, err
	}
	for _, docsList := range docsLists {
		typeDef := g.types[docsList.ColName]
		for _, doc := range docsList.Docs {
			g.resultDocs = append(g.resultDocs, GeneratedDoc{
				ColIndex: typeDef.index,
				JSON:     createDocJSON(&typeDef, doc),
			})
		}
	}
	return g.resultDocs, nil
}

func (g *randomDocGenerator) getMaxTotalDemand() int {
	totalDemand := 0
	for _, demand := range g.docsDemand {
		totalDemand += demand.max
	}
	return totalDemand
}

// getNextPrimaryDocKey returns the key of the next primary document to be used as a relation.
func (g *randomDocGenerator) getNextPrimaryDocKey(secondaryType string, field fieldDefinition) string {
	ind := g.usageCounter.getNextTypeIndForField(secondaryType, field)
	docKey := g.cols[field.typeStr][ind].docKey
	return docKey
}

func (g *randomDocGenerator) getDocKey(typeDef *typeDefinition, doc map[string]any) (string, error) {
	clientDoc, err := client.NewDocFromJSON([]byte(createDocJSON(typeDef, doc)))
	if err != nil {
		return "", err
	}
	return clientDoc.Key().String(), nil
}

func (g *randomDocGenerator) generateRandomDocs(order []string) ([]DocsList, error) {
	result := []DocsList{}
	for _, typeName := range order {
		col := DocsList{ColName: typeName}
		typeDef := g.types[typeName]

		currentTypeDemand := g.docsDemand[typeName]
		averageDemand := currentTypeDemand.getAverage()
		for i := 0; i < averageDemand; i++ {
			newDoc := make(map[string]any)
			for _, field := range typeDef.fields {
				if field.isRelation {
					if field.isPrimary {
						newDoc[field.name+request.RelatedObjectID] = g.getNextPrimaryDocKey(typeName, field)
					}
				} else {
					newDoc[field.name] = g.generateRandomValue(
						typeName,
						field.typeStr,
						g.config.ForField(typeName, field.name),
					)
				}
			}
			docKey, err := g.getDocKey(&typeDef, newDoc)
			if err != nil {
				return nil, err
			}
			g.cols[typeName] = append(g.cols[typeName], docRec{doc: newDoc, docKey: docKey})
			col.Docs = append(col.Docs, newDoc)
		}
		result = append(result, col)
	}
	return result, nil
}

func getRandomString(random *rand.Rand, n int) string {
	const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[random.Intn(len(letterBytes))]
	}
	return string(b)
}

func (g *randomDocGenerator) generateRandomValue(typeName, fieldType string, fieldConfig genConfig) any {
	genVal := g.getValueGenerator(fieldType, fieldConfig)
	if fieldConfig.fieldGenerator != nil {
		return fieldConfig.fieldGenerator(len(g.cols[typeName]), genVal)
	}
	return genVal()
}

func (g *randomDocGenerator) getValueGenerator(typeStr string, fieldConfig genConfig) func() any {
	switch typeStr {
	case stringType:
		strLen := defaultStrLen
		if prop, ok := fieldConfig.props["len"]; ok {
			strLen = prop.(int)
		}
		return func() any { return getRandomString(&g.random, strLen) }
	case intType:
		min, max := getMinMaxOrDefault(fieldConfig, defaultIntMin, defaultIntMax)
		return func() any { return min + g.random.Intn(max-min+1) }
	case boolType:
		ratio := 0.5
		if prop, ok := fieldConfig.props["ratio"]; ok {
			ratio = prop.(float64)
		}
		return func() any { return g.random.Float64() < ratio }
	case floatType:
		min, max := getMinMaxOrDefault(fieldConfig, 0.0, 1.0)
		return func() any { return min + g.random.Float64()*(max-min) }
	}
	panic("Can not generate random value for unknown type: " + typeStr)
}
