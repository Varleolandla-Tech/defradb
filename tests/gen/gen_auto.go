// Copyright 2023 Democratized Data Foundation
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package gen

import (
	"math/rand"

	"github.com/sourcenetwork/defradb/client"
	"github.com/sourcenetwork/defradb/client/request"
)

func AutoGenerateDocs(schema string, count int) []GeneratedDoc {
	parser := schemaParser{}
	typeDefs, genConfigs := parser.Parse(schema)
	generator := randomDocGenerator{types: typeDefs, config: genConfigs}
	return generator.GenerateDocs(count)
}

type relationUsage struct {
	index          int
	minAmount      int
	maxAmount      int
	docKeysCounter []struct {
		ind   int
		count int
	}
	numDocs int
}

func newRelationUsage(minAmount, maxAmount, numDocs int) relationUsage {
	docKeysCounter := make([]struct {
		ind   int
		count int
	}, numDocs)
	for i := range docKeysCounter {
		docKeysCounter[i].ind = i
	}
	return relationUsage{
		minAmount:      minAmount,
		maxAmount:      maxAmount,
		numDocs:        numDocs,
		docKeysCounter: docKeysCounter,
	}
}

func (u *relationUsage) useNextDocKey() int {
	docKeyCounterInd := 0
	if u.index >= u.minAmount*u.numDocs {
		docKeyCounterInd = rand.Intn(len(u.docKeysCounter))
	} else {
		docKeyCounterInd = u.index % len(u.docKeysCounter)
	}
	currentInd := u.docKeysCounter[docKeyCounterInd].ind
	counter := &u.docKeysCounter[docKeyCounterInd]
	counter.count++
	if counter.count >= u.maxAmount {
		lastCounterInd := len(u.docKeysCounter) - 1
		*counter = u.docKeysCounter[lastCounterInd]
		u.docKeysCounter = u.docKeysCounter[:lastCounterInd]
	}
	u.index++

	return currentInd
}

type randomDocGenerator struct {
	types      map[typeNameStr]typeDefinition
	config     map[typeNameStr]map[fieldNameStr]genConfig
	resultDocs []GeneratedDoc
	counter    map[typeNameStr]map[typeNameStr]map[fieldNameStr]relationUsage
	cols       map[typeNameStr][]docRec
	docsDemand map[typeNameStr]int
}

func (g *randomDocGenerator) GenerateDocs(count int) []GeneratedDoc {
	g.resultDocs = make([]GeneratedDoc, 0, count)
	g.counter = make(map[typeNameStr]map[typeNameStr]map[fieldNameStr]relationUsage)
	g.cols = make(map[typeNameStr][]docRec)
	g.docsDemand = make(map[typeNameStr]int)

	order := findDependencyOrder(g.types)
	g.docsDemand[order[0]] = count

	docsLists := g.generateRandomDocs(order)
	for _, docsList := range docsLists {
		typeDef := g.types[docsList.ColName]
		for _, doc := range docsList.Docs {
			g.resultDocs = append(g.resultDocs, GeneratedDoc{
				ColIndex: typeDef.index,
				JSON:     createDocJSON(doc),
			})
		}
	}
	return g.resultDocs
}

func getRandomString(n int) string {
	const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[rand.Intn(len(letterBytes))]
	}
	return string(b)
}

func (g *randomDocGenerator) generateRandomValue(typeStr string, config genConfig) any {
	switch typeStr {
	case "String":
		strLen := 10
		if prop, ok := config.props["len"]; ok {
			strLen = prop.(int)
		}
		return getRandomString(strLen)
	case "Int":
		minInt := 0
		intRange := 10000
		if prop, ok := config.props["min"]; ok {
			minInt = prop.(int)
		}
		if prop, ok := config.props["max"]; ok {
			intRange = prop.(int) - minInt
		}
		return minInt + rand.Intn(intRange+1)
	case "Boolean":
		return rand.Float32() < 0.5
	case "Float":
		minFloat := 0.0
		floatRange := 1.0
		if prop, ok := config.props["min"]; ok {
			minFloat = prop.(float64)
		}
		if prop, ok := config.props["max"]; ok {
			floatRange = prop.(float64) - minFloat
		}
		return minFloat + rand.Float64()*floatRange
	}
	panic("Can not generate random value for unknown type: " + typeStr)
}

type doc = map[string]any
type docRec struct {
	doc    doc
	docKey string
}

func (g *randomDocGenerator) getNextPrimaryDocKey(secondaryType typeNameStr, field fieldDefinition) string {
	primaryType := field.typeStr
	current := g.counter[primaryType][secondaryType][field.name]

	ind := current.useNextDocKey()

	docKey := g.cols[primaryType][ind].docKey
	g.counter[primaryType][secondaryType][field.name] = current
	return docKey
}

func (g *randomDocGenerator) getDocKey(doc map[string]any) string {
	clientDoc, err := client.NewDocFromJSON([]byte(createDocJSON(doc)))
	if err != nil {
		panic("Failed to create doc from JSON: " + err.Error())
	}
	return clientDoc.Key().String()
}

func (g *randomDocGenerator) generateRandomDocs(order []typeNameStr) []DocsList {
	result := []DocsList{}
	for _, typeName := range order {
		col := DocsList{ColName: typeName}
		typeDef := g.types[typeName]
		g.calculateDemandForSecondaryTypes(&typeDef)

		currentTypeDemand := g.docsDemand[typeName]
		for i := 0; i < currentTypeDemand; i++ {
			newDoc := make(doc)
			for _, field := range typeDef.fields {
				if field.isRelation {
					if field.isPrimary {
						newDoc[field.name+request.RelatedObjectID] = g.getNextPrimaryDocKey(typeName, field)
					}
				} else {
					newDoc[field.name] = g.generateRandomFieldValue(typeName, field)
				}
			}
			g.cols[typeName] = append(g.cols[typeName], docRec{doc: newDoc, docKey: g.getDocKey(newDoc)})
			col.Docs = append(col.Docs, newDoc)
		}
		result = append(result, col)
	}
	return result
}

func (g *randomDocGenerator) generateRandomFieldValue(typeName string, field fieldDefinition) any {
	var fieldConfig genConfig
	typeConfig := g.config[typeName]
	if typeConfig != nil {
		fieldConfig = typeConfig[field.name]
	}
	return g.generateRandomValue(field.typeStr, fieldConfig)
}

func (g *randomDocGenerator) calculateDemandForSecondaryTypes(typeDef *typeDefinition) {
	for _, field := range typeDef.fields {
		if field.isRelation && !field.isPrimary {
			primaryDocDemand := g.docsDemand[typeDef.name]
			secondaryDocDemand := primaryDocDemand
			minInt := 1
			intRange := 0

			if field.isArray {
				var fieldConfig genConfig
				typeConfig := g.config[typeDef.name]
				if typeConfig != nil {
					fieldConfig = typeConfig[field.name]
				}
				minInt = 2
				if prop, ok := fieldConfig.props["min"]; ok {
					minInt = prop.(int)
				}
				if prop, ok := fieldConfig.props["max"]; ok {
					intRange = prop.(int) - minInt
				}
				average := float64(minInt) + float64(intRange)/2
				secondaryDocDemand = int(float64(primaryDocDemand) * average)
			}

			g.docsDemand[field.typeStr] = secondaryDocDemand

			secondaryTypeDef := g.types[field.typeStr]
			for _, secondaryTypeField := range secondaryTypeDef.fields {
				if secondaryTypeField.typeStr == typeDef.name {
					g.counter[typeDef.name] = map[typeNameStr]map[fieldNameStr]relationUsage{
						field.typeStr: {
							secondaryTypeField.name: newRelationUsage(
								minInt, minInt+intRange, g.docsDemand[typeDef.name]),
						},
					}
				}
			}
		}
	}
}

func findDependencyOrder(parsedTypes map[string]typeDefinition) []string {
	graph := make(map[string][]string)
	visited := make(map[string]bool)
	stack := []string{}

	appendUnique := func(slice []string, val string) []string {
		for _, item := range slice {
			if item == val {
				return slice
			}
		}
		return append(slice, val)
	}

	for typeName, typeDef := range parsedTypes {
		for _, field := range typeDef.fields {
			if field.isRelation {
				if field.isPrimary {
					graph[field.typeStr] = appendUnique(graph[field.typeStr], typeName)
				} else {
					graph[typeName] = appendUnique(graph[typeName], field.typeStr)
				}
			}
		}
	}

	var dfs func(node string)
	dfs = func(node string) {
		if visited[node] {
			return
		}
		visited[node] = true

		for _, neighbor := range graph[node] {
			if !visited[neighbor] {
				dfs(neighbor)
			}
		}

		stack = append(stack, node)
	}

	for typeName := range parsedTypes {
		if !visited[typeName] {
			dfs(typeName)
		}
	}

	for i, j := 0, len(stack)-1; i < j; i, j = i+1, j-1 {
		stack[i], stack[j] = stack[j], stack[i]
	}

	return stack
}
